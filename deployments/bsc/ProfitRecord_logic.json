{
  "address": "0x1cC7A9B96e69c58e1bedA219D1D3E64D8C6e2F41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tornContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_root_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TORN_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__ProfitRecord_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_root_token",
          "type": "uint256"
        }
      ],
      "name": "getProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "torn_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_root_token",
          "type": "uint256"
        }
      ],
      "name": "newDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profitStore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_root_token",
          "type": "uint256"
        }
      ],
      "name": "withDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3741cee7076a8e2b413d9d87a19da78daa0b7d40d08e6954823277ec4dffb141",
  "receipt": {
    "to": null,
    "from": "0xc54556c1aC886976C44FF62caE520E5aC6c29E07",
    "contractAddress": "0x1cC7A9B96e69c58e1bedA219D1D3E64D8C6e2F41",
    "transactionIndex": 119,
    "gasUsed": "581808",
    "logsBloom": "0x
    "blockHash": "0x29a7035bf7512b9a2556f84cb84c5f6ce8931688efff35ee8fae4cf70d4ab7dd",
    "transactionHash": "0x3741cee7076a8e2b413d9d87a19da78daa0b7d40d08e6954823277ec4dffb141",
    "logs": [],
    "blockNumber": 18879306,
    "cumulativeGasUsed": "9986676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB26a3df3B9D52A00c08DAf41698C1408D12Cf59b",
    "0x45bDb14179c1629679F59a2a2a62EFF5B5F92e2a"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d4c3baa55254e459abd61949a35ba8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tornContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_root_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TORN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__ProfitRecord_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_root_token\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"torn_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_root_token\",\"type\":\"uint256\"}],\"name\":\"newDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitStore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_root_token\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__ProfitRecord_init()\":{\"notice\":\"---------- init ---------- *\"},\"constructor\":{\"notice\":\"---------- constructor ---------- *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProfitRecord.sol\":\"ProfitRecord\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Interface/IDepositContract.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IDepositContract {\\n    function totalBalanceOfTorn() external view returns (uint256);\\n    function checkRewardOnGov() external view returns (uint256);\\n    function withDrawWithApproval(uint256 _amount) external ;\\n    function withdraw_for_exit(address addr,uint256 _amount_token) external  returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d06b60b90c2b9ff11588d117edb9e47e5e29d10e7dcbd5309860f51e577f80e\"},\"contracts/Interface/IRootManger.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IRootManger {\\n       function safeDeposit(address account,uint256 value) external returns (uint256);\\n       function safeWithdraw(address account,uint256 to_burn) external ;\\n       function balanceOfTorn(address account) external view returns (uint256);\\n       function addIncome(uint256 amount)  external ;\\n       function valueForTorn(uint256 value_token)  external view returns (uint256);\\n       function operator() external view returns(address);\\n       function depositContract() external view returns(address);\\n       function inComeContract() external view returns(address);\\n\\n       function  exitQueueContract() external view returns (address);\\n       function totalTorn() external view returns (uint256);\\n       function removeRelayer(uint256 index)  external  ;\\n       function addRelayer(address __relayer,uint256 index)  external  ;\\n       function _relayers(uint256 index) external view returns (address);\\n       function totalRelayerTorn() external view returns (uint256 ret);\\n}\\n\",\"keccak256\":\"0xa0ee78ea68e85b12f4974743851c2d59ecd51ce8cd493604c555fcae4220d70e\"},\"contracts/ProfitRecord.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./Interface/IDepositContract.sol\\\";\\nimport \\\"./Interface/IRootManger.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract ProfitRecord is ContextUpgradeable{\\n\\n    address immutable public ROOT_MANAGER;\\n    address immutable public TORN_CONTRACT;\\n\\n    struct PRICE_STORE {\\n        uint256 price;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => PRICE_STORE) public profitStore;\\n\\n\\n      modifier onlyDepositContract() {\\n        require(msg.sender == IRootManger(ROOT_MANAGER).depositContract(), \\\"Caller is not depositContract\\\");\\n        _;\\n    }\\n\\n\\n    /** ---------- constructor ---------- **/\\n    constructor(address _tornContract, address _root_manager ) {\\n        TORN_CONTRACT = _tornContract;\\n        ROOT_MANAGER = _root_manager;\\n    }\\n\\n    /** ---------- init ---------- **/\\n    function __ProfitRecord_init() public initializer {\\n         __Context_init();\\n    }\\n\\n\\n    function  newDeposit(address addr,uint256 torn_amount,uint256 amount_root_token)  onlyDepositContract public{\\n        PRICE_STORE memory userStore = profitStore[addr];\\n        if(userStore.amount == 0){\\n           uint256 new_price = torn_amount*(10**18)/amount_root_token;\\n           profitStore[addr].price = new_price;\\n           profitStore[addr].amount = amount_root_token;\\n        }else{\\n              // calc weighted average\\n              profitStore[addr].price =  (userStore.amount*userStore.price +torn_amount*(10**18))/(amount_root_token+userStore.amount);\\n              profitStore[addr].amount =  amount_root_token+userStore.amount;\\n        }\\n\\n    }\\n\\n    function  withDraw(address addr,uint256 amount_root_token)  onlyDepositContract public returns (uint256 profit) {\\n\\n        profit = getProfit(addr,amount_root_token);\\n        if(profitStore[addr].amount > amount_root_token){\\n            profitStore[addr].amount -= amount_root_token;\\n        }\\n        else{\\n           delete profitStore[addr];\\n        }\\n    }\\n\\n    function  getProfit(address addr,uint256 amount_root_token) public view returns (uint256 profit){\\n        PRICE_STORE memory userStore = profitStore[addr];\\n        require(userStore.amount >= amount_root_token,\\\"err root token\\\");\\n        uint256 value = IRootManger(ROOT_MANAGER).valueForTorn(amount_root_token);\\n        profit = value - (userStore.price*amount_root_token/10**18);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdd7b6fab0f182e1a14d2ea8eb255806682853c827d459335dc779a4882533d0a\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a56380380610a5683398101604081905261002f91610062565b6001600160a01b0391821660a05216608052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516109886100ce600039600060e90152600081816101450152818161017e0152818161037501526105ff01526109886000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063447890b01161005b578063447890b014610123578063457511371461012d5780635f61e3ec14610140578063b69bc3581461016757600080fd5b8063191e2e83146100825780631f7d7948146100a857806331e81921146100e4575b600080fd5b6100956100903660046107c3565b61017a565b6040519081526020015b60405180910390f35b6100cf6100b63660046107ef565b6033602052600090815260409020805460019091015482565b6040805192835260208301919091520161009f565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009f565b61012b6102fe565b005b61012b61013b366004610813565b610373565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6100956101753660046107c3565b610575565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d557600080fd5b505afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d9190610848565b6001600160a01b0316336001600160a01b0316146102725760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f74206465706f736974436f6e747261637400000060448201526064015b60405180910390fd5b61027c8383610575565b6001600160a01b0384166000908152603360205260409020600101549091508210156102d8576001600160a01b038316600090815260336020526040812060010180548492906102cd90849061087b565b909155506102f89050565b6001600160a01b0383166000908152603360205260408120818155600101555b92915050565b600061030a60016106b9565b90508015610322576000805461ff0019166101001790555b61032a610741565b8015610370576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103cc57600080fd5b505afa1580156103e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104049190610848565b6001600160a01b0316336001600160a01b0316146104645760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f74206465706f736974436f6e74726163740000006044820152606401610269565b6001600160a01b038316600090815260336020908152604091829020825180840190935280548352600101549082018190526104e0576000826104af85670de0b6b3a7640000610892565b6104b991906108b1565b6001600160a01b03861660009081526033602052604090209081556001018390555061056f565b60208101516104ef90836108d3565b61050184670de0b6b3a7640000610892565b825160208401516105129190610892565b61051c91906108d3565b61052691906108b1565b6001600160a01b03851660009081526033602090815260409091209190915581015161055290836108d3565b6001600160a01b0385166000908152603360205260409020600101555b50505050565b6001600160a01b038216600090815260336020908152604080832081518083019092528054825260010154918101829052908311156105e75760405162461bcd60e51b815260206004820152600e60248201526d32b939103937b7ba103a37b5b2b760911b6044820152606401610269565b6040516272e6bd60e41b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063072e6bd09060240160206040518083038186803b15801561064957600080fd5b505afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906108eb565b9050670de0b6b3a764000084836000015161069c9190610892565b6106a691906108b1565b6106b0908261087b565b95945050505050565b60008054610100900460ff1615610700578160ff1660011480156106dc5750303b155b6106f85760405162461bcd60e51b815260040161026990610904565b506000919050565b60005460ff8084169116106107275760405162461bcd60e51b815260040161026990610904565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166107ac5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610269565b565b6001600160a01b038116811461037057600080fd5b600080604083850312156107d657600080fd5b82356107e1816107ae565b946020939093013593505050565b60006020828403121561080157600080fd5b813561080c816107ae565b9392505050565b60008060006060848603121561082857600080fd5b8335610833816107ae565b95602085013595506040909401359392505050565b60006020828403121561085a57600080fd5b815161080c816107ae565b634e487b7160e01b600052601160045260246000fd5b60008282101561088d5761088d610865565b500390565b60008160001904831182151516156108ac576108ac610865565b500290565b6000826108ce57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156108e6576108e6610865565b500190565b6000602082840312156108fd57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212203dbc491970f4b1aa069dee8d165da1bbf58aa753e9662bb0a32d8069262d34ef64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063447890b01161005b578063447890b014610123578063457511371461012d5780635f61e3ec14610140578063b69bc3581461016757600080fd5b8063191e2e83146100825780631f7d7948146100a857806331e81921146100e4575b600080fd5b6100956100903660046107c3565b61017a565b6040519081526020015b60405180910390f35b6100cf6100b63660046107ef565b6033602052600090815260409020805460019091015482565b6040805192835260208301919091520161009f565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009f565b61012b6102fe565b005b61012b61013b366004610813565b610373565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6100956101753660046107c3565b610575565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d557600080fd5b505afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d9190610848565b6001600160a01b0316336001600160a01b0316146102725760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f74206465706f736974436f6e747261637400000060448201526064015b60405180910390fd5b61027c8383610575565b6001600160a01b0384166000908152603360205260409020600101549091508210156102d8576001600160a01b038316600090815260336020526040812060010180548492906102cd90849061087b565b909155506102f89050565b6001600160a01b0383166000908152603360205260408120818155600101555b92915050565b600061030a60016106b9565b90508015610322576000805461ff0019166101001790555b61032a610741565b8015610370576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103cc57600080fd5b505afa1580156103e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104049190610848565b6001600160a01b0316336001600160a01b0316146104645760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f74206465706f736974436f6e74726163740000006044820152606401610269565b6001600160a01b038316600090815260336020908152604091829020825180840190935280548352600101549082018190526104e0576000826104af85670de0b6b3a7640000610892565b6104b991906108b1565b6001600160a01b03861660009081526033602052604090209081556001018390555061056f565b60208101516104ef90836108d3565b61050184670de0b6b3a7640000610892565b825160208401516105129190610892565b61051c91906108d3565b61052691906108b1565b6001600160a01b03851660009081526033602090815260409091209190915581015161055290836108d3565b6001600160a01b0385166000908152603360205260409020600101555b50505050565b6001600160a01b038216600090815260336020908152604080832081518083019092528054825260010154918101829052908311156105e75760405162461bcd60e51b815260206004820152600e60248201526d32b939103937b7ba103a37b5b2b760911b6044820152606401610269565b6040516272e6bd60e41b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063072e6bd09060240160206040518083038186803b15801561064957600080fd5b505afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906108eb565b9050670de0b6b3a764000084836000015161069c9190610892565b6106a691906108b1565b6106b0908261087b565b95945050505050565b60008054610100900460ff1615610700578160ff1660011480156106dc5750303b155b6106f85760405162461bcd60e51b815260040161026990610904565b506000919050565b60005460ff8084169116106107275760405162461bcd60e51b815260040161026990610904565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166107ac5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610269565b565b6001600160a01b038116811461037057600080fd5b600080604083850312156107d657600080fd5b82356107e1816107ae565b946020939093013593505050565b60006020828403121561080157600080fd5b813561080c816107ae565b9392505050565b60008060006060848603121561082857600080fd5b8335610833816107ae565b95602085013595506040909401359392505050565b60006020828403121561085a57600080fd5b815161080c816107ae565b634e487b7160e01b600052601160045260246000fd5b60008282101561088d5761088d610865565b500390565b60008160001904831182151516156108ac576108ac610865565b500290565b6000826108ce57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156108e6576108e6610865565b500190565b6000602082840312156108fd57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212203dbc491970f4b1aa069dee8d165da1bbf58aa753e9662bb0a32d8069262d34ef64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__ProfitRecord_init()": {
        "notice": "---------- init ---------- *"
      },
      "constructor": {
        "notice": "---------- constructor ---------- *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ProfitRecord.sol:ProfitRecord",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/ProfitRecord.sol:ProfitRecord",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1773,
        "contract": "contracts/ProfitRecord.sol:ProfitRecord",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6715,
        "contract": "contracts/ProfitRecord.sol:ProfitRecord",
        "label": "profitStore",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(PRICE_STORE)6710_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PRICE_STORE)6710_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ProfitRecord.PRICE_STORE)",
        "numberOfBytes": "32",
        "value": "t_struct(PRICE_STORE)6710_storage"
      },
      "t_struct(PRICE_STORE)6710_storage": {
        "encoding": "inplace",
        "label": "struct ProfitRecord.PRICE_STORE",
        "members": [
          {
            "astId": 6707,
            "contract": "contracts/ProfitRecord.sol:ProfitRecord",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6709,
            "contract": "contracts/ProfitRecord.sol:ProfitRecord",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}