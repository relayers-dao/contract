{
  "address": "0x6B993008DC453De6E3Eec06E9Fe610efc22a4D59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRoute",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tornContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_root_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distribute_torn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "with_draw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_ROUTE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TORN_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeTorn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTorn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb66bd203ca689a60d0644850a75bedc9780752f381df7261c1abd82f55799e27",
  "receipt": {
    "to": null,
    "from": "0xc54556c1aC886976C44FF62caE520E5aC6c29E07",
    "contractAddress": "0x6B993008DC453De6E3Eec06E9Fe610efc22a4D59",
    "transactionIndex": 37,
    "gasUsed": "818070",
    "logsBloom": "0x
    "blockHash": "0x0f7d18013f016dd40b3bc126b835193f4b34e3bbec2feeb79dde9c30d3cf02d1",
    "transactionHash": "0xb66bd203ca689a60d0644850a75bedc9780752f381df7261c1abd82f55799e27",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 29421794,
        "transactionHash": "0xb66bd203ca689a60d0644850a75bedc9780752f381df7261c1abd82f55799e27",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c54556c1ac886976c44ff62cae520e5ac6c29e07",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000082c95d67fbf70a000000000000000000000000000000000000000000000000428502375e5028e7000000000000000000000000000000000000000000000278304d0cd65562f25e000000000000000000000000000000000000000000000000420238d9f65431dd00000000000000000000000000000000000000000000027830cfd633bd5ee968",
        "logIndex": 128,
        "blockHash": "0x0f7d18013f016dd40b3bc126b835193f4b34e3bbec2feeb79dde9c30d3cf02d1"
      }
    ],
    "blockNumber": 29421794,
    "cumulativeGasUsed": "5969253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35AfA074319E0CD8192f3B8879aC3aCe9f51Ef01",
    "0xE7E486cAAC3AdEAD0df4eFF2285BfB6160D63376",
    "0x3FFe033d7fd8f1A2FE006E59F1F384740Fa54dB6",
    "0x137f2bf9584dE69371624b38bc04fA3c060Cdb29"
  ],
  "numDeployments": 4,
  "solcInputHash": "48a7b2763fee15da6fd78d5b9b9bb647",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRoute\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tornContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_root_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distribute_torn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"with_draw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_ROUTE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TORN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeTorn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapETHForTorn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"---------- constructor ---------- *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InCome.sol\":\"Income\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/InCome.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./Interface/IRootManger.sol\\\";\\nimport \\\"./Interface/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Interface/IinComeContract.sol\\\";\\n\\ncontract Income is IinComeContract {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address immutable public WETH;\\n    address immutable public SWAP_ROUTE;\\n    address immutable public TORN_CONTRACT;\\n    address immutable public ROOT_MANAGER;\\n\\n\\n    /** ---------- constructor ---------- **/\\n    constructor(\\n        address _swapRoute,\\n        address _weth,\\n        address _tornContract,\\n        address _root_manager\\n    ) {\\n        SWAP_ROUTE = _swapRoute;\\n        WETH = _weth;\\n        TORN_CONTRACT = _tornContract;\\n        ROOT_MANAGER = _root_manager;\\n    }\\n\\n    /** ---------- modifier ---------- **/\\n    modifier onlyOperator() {\\n        require(msg.sender == IRootManger(ROOT_MANAGER).operator(), \\\"Caller is not operator\\\");\\n        _;\\n    }\\n\\n\\n    event with_draw(address, address,uint256);\\n    function withdraw(address _token, uint256 _amount) external payable onlyOperator {\\n\\n        emit with_draw(_token,msg.sender,_amount);\\n\\n        if (_token == address(0)) {\\n            require(address(this).balance >= _amount, 'Insufficient balance');\\n            AddressUpgradeable.sendValue(payable(msg.sender), _amount);\\n        } else {\\n            //require(IERC20Upgradeable(_token).balanceOf(address(this)) >= _amount, 'Insufficient balance');\\n            IERC20Upgradeable(_token).safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n\\n\\n    function swapETHForTorn(uint256 _amount, uint256 _minAmountOut) external payable onlyOperator {\\n       require(msg.value == _amount, \\\"unconformity value\\\");\\n        ISwapRouter(SWAP_ROUTE).exactInputSingle{value: _amount}(ISwapRouter.ExactInputSingleParams({\\n            tokenIn: WETH,\\n            tokenOut: TORN_CONTRACT,\\n            fee: 10000,\\n            recipient: address(this),\\n            deadline: block.timestamp + 60,\\n            amountIn: _amount,\\n            amountOutMinimum: _minAmountOut,\\n            sqrtPriceLimitX96: 0\\n        }));\\n    }\\n\\n    event distribute_torn(address,uint256);\\n    function distributeTorn(uint256 _amount) external onlyOperator {\\n        //require(IERC20Upgradeable(TORN_CONTRACT).balanceOf(address(this)) >= _amount, 'Insufficient balance');\\n        address _depositAddress = IRootManger(ROOT_MANAGER).depositContract();\\n        //require(_depositAddress != address(0), 'Invalid deposit address');\\n        IRootManger(ROOT_MANAGER).addIncome(_amount);\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(TORN_CONTRACT),_depositAddress, _amount);\\n        emit distribute_torn(_depositAddress,_amount);\\n    }\\n\\n\\n    receive() external payable {\\n\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x15ef83a830ee8007c42a28a89e51331f93f280858d982cb04b7df8d8512ca014\"},\"contracts/Interface/IRootManger.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IRootManger {\\n       function safeDeposit(address account,uint256 value) external;\\n       function safeWithdraw(address account,uint256 to_burn) external ;\\n       function balanceOfTorn(address account) external view returns (uint256);\\n       function addIncome(uint256 amount)  external ;\\n       function valueForTorn(uint256 value_token)  external view returns (uint256);\\n       function operator() external view returns(address);\\n       function depositContract() external view returns(address);\\n       function inComeContract() external view returns(address);\\n\\n       function  exitQueueContract() external view returns (address);\\n       function totalTorn() external view returns (uint256);\\n       function removeRelayer(uint256 index)  external  ;\\n       function addRelayer(address __relayer,uint256 index)  external  ;\\n       function _relayers(uint256 index) external view returns (address);\\n       function totalRelayerTorn() external view returns (uint256 ret);\\n}\\n\",\"keccak256\":\"0x0f29a9ad636efdcf06728e6753fbf168af98807e81ddb4839446a2e01e34e429\"},\"contracts/Interface/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\\n}\",\"keccak256\":\"0xa1f3c2f84d34047db382c62ab6b72c8450d12b64485ec8ddd6c4d70ab63e55ae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Interface/IinComeContract.sol\":{\"content\":\"pragma solidity ^0.8.0;\\ninterface IinComeContract {\\n\\n}\\n\",\"keccak256\":\"0x37e3f60557b08e4a6f1c47b3c8e6d5b6ad9c7a9248a5ef903bc427ed55e12e87\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610f07380380610f078339810160408190526100309161006e565b6001600160a01b0393841660a052918316608052821660c0521660e0526100c2565b80516001600160a01b038116811461006957600080fd5b919050565b6000806000806080858703121561008457600080fd5b61008d85610052565b935061009b60208601610052565b92506100a960408601610052565b91506100b760608601610052565b905092959194509250565b60805160a05160c05160e051610dcf6101386000396000818160f7015281816101b60152818161047001528181610533015281816105db01526106b201526000818160a70152818161032f015261064401526000818161017f01526102c401526000818161014b01526103000152610dcf6000f3fe6080604052600436106100745760003560e01c80638bf6b1e21161004e5780638bf6b1e214610119578063ad5c464814610139578063d468b1f01461016d578063f3fef3a3146101a157600080fd5b80632b129d3b1461008057806331e81921146100955780635f61e3ec146100e557600080fd5b3661007b57005b600080fd5b61009361008e366004610bed565b6101b4565b005b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100f157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561012557600080fd5b50610093610134366004610c0f565b61046e565b34801561014557600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561017957600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6100936101af366004610c40565b6106b0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561020d57600080fd5b505afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190610c6c565b6001600160a01b0316336001600160a01b03161461027e5760405162461bcd60e51b815260040161027590610c89565b60405180910390fd5b8134146102c25760405162461bcd60e51b8152602060048201526012602482015271756e636f6e666f726d6974792076616c756560701b6044820152606401610275565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663414bf389836040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200161271062ffffff168152602001306001600160a01b0316815260200142603c6103859190610cb9565b8152602080820188905260408083018890526000606093840152805160e087811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e4820152610104016020604051808303818588803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104699190610cdf565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c757600080fd5b505afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610c6c565b6001600160a01b0316336001600160a01b03161461052f5760405162461bcd60e51b815260040161027590610c89565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190610c6c565b604051639380f97360e01b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639380f97390602401600060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b5050505061066a7f0000000000000000000000000000000000000000000000000000000000000000828461082d565b604080516001600160a01b0383168152602081018490527f25b2c293934710dac64b8a25596b8a8ba34c856abeee17f8ca10a513e5eb6871910160405180910390a15050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190610c6c565b6001600160a01b0316336001600160a01b0316146107715760405162461bcd60e51b815260040161027590610c89565b604080516001600160a01b03841681523360208201529081018290527f4004a0ae8f5cb85c80a86faa773db946ac30c9ed00ea9d86f1bf0b96c820c29d9060600160405180910390a16001600160a01b03821661081d578047101561080f5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610275565b610819338261087f565b5050565b6108196001600160a01b03831633835b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610469908490610998565b804710156108cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610275565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b50509050806104695760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610275565b60006109ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a6a9092919063ffffffff16565b8051909150156104695780806020019051810190610a0b9190610cf8565b6104695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610275565b6060610a798484600085610a83565b90505b9392505050565b606082471015610ae45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610275565b6001600160a01b0385163b610b3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610275565b600080866001600160a01b03168587604051610b579190610d4a565b60006040518083038185875af1925050503d8060008114610b94576040519150601f19603f3d011682016040523d82523d6000602084013e610b99565b606091505b5091509150610ba9828286610bb4565b979650505050505050565b60608315610bc3575081610a7c565b825115610bd35782518084602001fd5b8160405162461bcd60e51b81526004016102759190610d66565b60008060408385031215610c0057600080fd5b50508035926020909101359150565b600060208284031215610c2157600080fd5b5035919050565b6001600160a01b0381168114610c3d57600080fd5b50565b60008060408385031215610c5357600080fd5b8235610c5e81610c28565b946020939093013593505050565b600060208284031215610c7e57600080fd5b8151610a7c81610c28565b60208082526016908201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b604082015260600190565b60008219821115610cda57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610cf157600080fd5b5051919050565b600060208284031215610d0a57600080fd5b81518015158114610a7c57600080fd5b60005b83811015610d35578181015183820152602001610d1d565b83811115610d44576000848401525b50505050565b60008251610d5c818460208701610d1a565b9190910192915050565b6020815260008251806020840152610d85816040850160208701610d1a565b601f01601f1916919091016040019291505056fea26469706673582212205e0b2782f7a854b25c3f2eee44241a56d72cd24e2f1819607a73f23fd6ce841e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80638bf6b1e21161004e5780638bf6b1e214610119578063ad5c464814610139578063d468b1f01461016d578063f3fef3a3146101a157600080fd5b80632b129d3b1461008057806331e81921146100955780635f61e3ec146100e557600080fd5b3661007b57005b600080fd5b61009361008e366004610bed565b6101b4565b005b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100f157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561012557600080fd5b50610093610134366004610c0f565b61046e565b34801561014557600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561017957600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6100936101af366004610c40565b6106b0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561020d57600080fd5b505afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190610c6c565b6001600160a01b0316336001600160a01b03161461027e5760405162461bcd60e51b815260040161027590610c89565b60405180910390fd5b8134146102c25760405162461bcd60e51b8152602060048201526012602482015271756e636f6e666f726d6974792076616c756560701b6044820152606401610275565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663414bf389836040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200161271062ffffff168152602001306001600160a01b0316815260200142603c6103859190610cb9565b8152602080820188905260408083018890526000606093840152805160e087811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e4820152610104016020604051808303818588803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104699190610cdf565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c757600080fd5b505afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610c6c565b6001600160a01b0316336001600160a01b03161461052f5760405162461bcd60e51b815260040161027590610c89565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e94ad65b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190610c6c565b604051639380f97360e01b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639380f97390602401600060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b5050505061066a7f0000000000000000000000000000000000000000000000000000000000000000828461082d565b604080516001600160a01b0383168152602081018490527f25b2c293934710dac64b8a25596b8a8ba34c856abeee17f8ca10a513e5eb6871910160405180910390a15050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190610c6c565b6001600160a01b0316336001600160a01b0316146107715760405162461bcd60e51b815260040161027590610c89565b604080516001600160a01b03841681523360208201529081018290527f4004a0ae8f5cb85c80a86faa773db946ac30c9ed00ea9d86f1bf0b96c820c29d9060600160405180910390a16001600160a01b03821661081d578047101561080f5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610275565b610819338261087f565b5050565b6108196001600160a01b03831633835b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610469908490610998565b804710156108cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610275565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b50509050806104695760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610275565b60006109ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a6a9092919063ffffffff16565b8051909150156104695780806020019051810190610a0b9190610cf8565b6104695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610275565b6060610a798484600085610a83565b90505b9392505050565b606082471015610ae45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610275565b6001600160a01b0385163b610b3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610275565b600080866001600160a01b03168587604051610b579190610d4a565b60006040518083038185875af1925050503d8060008114610b94576040519150601f19603f3d011682016040523d82523d6000602084013e610b99565b606091505b5091509150610ba9828286610bb4565b979650505050505050565b60608315610bc3575081610a7c565b825115610bd35782518084602001fd5b8160405162461bcd60e51b81526004016102759190610d66565b60008060408385031215610c0057600080fd5b50508035926020909101359150565b600060208284031215610c2157600080fd5b5035919050565b6001600160a01b0381168114610c3d57600080fd5b50565b60008060408385031215610c5357600080fd5b8235610c5e81610c28565b946020939093013593505050565b600060208284031215610c7e57600080fd5b8151610a7c81610c28565b60208082526016908201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b604082015260600190565b60008219821115610cda57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610cf157600080fd5b5051919050565b600060208284031215610d0a57600080fd5b81518015158114610a7c57600080fd5b60005b83811015610d35578181015183820152602001610d1d565b83811115610d44576000848401525b50505050565b60008251610d5c818460208701610d1a565b9190910192915050565b6020815260008251806020840152610d85816040850160208701610d1a565b601f01601f1916919091016040019291505056fea26469706673582212205e0b2782f7a854b25c3f2eee44241a56d72cd24e2f1819607a73f23fd6ce841e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "---------- constructor ---------- *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}